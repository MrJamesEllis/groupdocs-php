<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class AntAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Create annotation
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File ID
   *  @param postData  annotation
   *  
	 * @return CreateAnnotationResponse {@link CreateAnnotationResponse} 
	 * @throws APIException 
	 */

	 public function CreateAnnotation($userId, $fileId, $postData) {

		//parse inputs
		$resourcePath = "/ant/{userId}/files/{fileId}/annotations";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'CreateAnnotationResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get list of annotations
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File ID
   *  
	 * @return ListAnnotationsResponse {@link ListAnnotationsResponse} 
	 * @throws APIException 
	 */

	 public function ListAnnotations($userId, $fileId) {

		//parse inputs
		$resourcePath = "/ant/{userId}/files/{fileId}/annotations";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ListAnnotationsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete annotation
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param annotationId  Annotation ID
   *  
	 * @return DeleteAnnotationResponse {@link DeleteAnnotationResponse} 
	 * @throws APIException 
	 */

	 public function DeleteAnnotation($userId, $annotationId) {

		//parse inputs
		$resourcePath = "/ant/{userId}/annotations/{annotationId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($annotationId !== null) {
			$resourcePath = str_replace("{annotationId}", $annotationId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'DeleteAnnotationResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Create annotation reply
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param annotationId  Annotation ID
   *  @param message  Message
   *  
	 * @return AddReplyResponse {@link AddReplyResponse} 
	 * @throws APIException 
	 */

	 public function CreateAnnotationReply($userId, $annotationId, $message) {

		//parse inputs
		$resourcePath = "/ant/{userId}/annotations/{annotationId}/replies";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($annotationId !== null) {
			$resourcePath = str_replace("{annotationId}", $annotationId, $resourcePath);
		}
		if($message !== null) {
			$resourcePath = str_replace("{message}", $message, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'AddReplyResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Edit annotation reply
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param replyGuid  Reply GUID
   *  @param message  Message
   *  
	 * @return EditReplyResponse {@link EditReplyResponse} 
	 * @throws APIException 
	 */

	 public function EditAnnotationReply($userId, $replyGuid, $message) {

		//parse inputs
		$resourcePath = "/ant/{userId}/replies/{replyGuid}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($replyGuid !== null) {
			$resourcePath = str_replace("{replyGuid}", $replyGuid, $resourcePath);
		}
		if($message !== null) {
			$resourcePath = str_replace("{message}", $message, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'EditReplyResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get list of annotation replies
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param annotationId  Annotation ID
   *  @param after  After
   *  
	 * @return ListRepliesResponse {@link ListRepliesResponse} 
	 * @throws APIException 
	 */

	 public function ListAnnotationReplies($userId, $annotationId, $after) {

		//parse inputs
		$resourcePath = "/ant/{userId}/annotations/{annotationId}/replies?after={after}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($annotationId !== null) {
			$resourcePath = str_replace("{annotationId}", $annotationId, $resourcePath);
		}
		if($after !== null) {
			$resourcePath = str_replace("{after}", $after, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ListRepliesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Set annotation collaborators
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File ID
   *  @param collaborators  Collaborators
   *  
	 * @return SetCollaboratorsResponse {@link SetCollaboratorsResponse} 
	 * @throws APIException 
	 */

	 public function SetAnnotationCollaborators($userId, $fileId, $collaborators) {

		//parse inputs
		$resourcePath = "/ant/{userId}/files/{fileId}/collaborators";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}
		if($collaborators !== null) {
			$resourcePath = str_replace("{collaborators}", $collaborators, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SetCollaboratorsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get list of annotation collaborators
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File ID
   *  
	 * @return GetCollaboratorsResponse {@link GetCollaboratorsResponse} 
	 * @throws APIException 
	 */

	 public function GetAnnotationCollaborators($userId, $fileId) {

		//parse inputs
		$resourcePath = "/ant/{userId}/files/{fileId}/collaborators";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'GetCollaboratorsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Move annotation
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param annotationId  Annotation ID
   *  @param postData  position
   *  
	 * @return MoveAnnotationResponse {@link MoveAnnotationResponse} 
	 * @throws APIException 
	 */

	 public function MoveAnnotation($userId, $annotationId, $postData) {

		//parse inputs
		$resourcePath = "/ant/{userId}/annotations/{annotationId}/position";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($annotationId !== null) {
			$resourcePath = str_replace("{annotationId}", $annotationId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'MoveAnnotationResponse');
		return $responseObject;
				
				
	 }



}