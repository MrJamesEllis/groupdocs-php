<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class DocAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * View Document
	 *
	 * 
	 * 
   * @param docDocInputFilesInput  
   *  
	 * @return ViewDocumentResponse {@link ViewDocumentResponse} 
	 * @throws APIException 
	 */

	 public function ViewDocument($docDocInputFilesInput) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/thumbnails?page_number={pageNumber}&page_count={pageCount}&quality={quality}&use_pdf={usePdf}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($docDocInputFilesInput !== null && $docDocInputFilesInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $docDocInputFilesInput->userId, $resourcePath);	
		}
		if($docDocInputFilesInput !== null && $docDocInputFilesInput->fileId !== null) {
		 	$resourcePath = str_replace("{fileId}", $docDocInputFilesInput->fileId, $resourcePath);	
		}
		if($docDocInputFilesInput !== null && $docDocInputFilesInput->pageNumber !== null) {
		 	$resourcePath = str_replace("{pageNumber}", $docDocInputFilesInput->pageNumber, $resourcePath);	
		}
		if($docDocInputFilesInput !== null && $docDocInputFilesInput->pageCount !== null) {
		 	$resourcePath = str_replace("{pageCount}", $docDocInputFilesInput->pageCount, $resourcePath);	
		}
		if($docDocInputFilesInput !== null && $docDocInputFilesInput->quality !== null) {
		 	$resourcePath = str_replace("{quality}", $docDocInputFilesInput->quality, $resourcePath);	
		}
		if($docDocInputFilesInput !== null && $docDocInputFilesInput->usePdf !== null) {
		 	$resourcePath = str_replace("{usePdf}", $docDocInputFilesInput->usePdf, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ViewDocumentResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get Document Views
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param startIndex  Use Pdf
   *  @param pageSize  Page size
   *  
	 * @return DocumentViewsResponse {@link DocumentViewsResponse} 
	 * @throws APIException 
	 */

	 public function GetDocumentViews($userId, $startIndex, $pageSize) {

		//parse inputs
		$resourcePath = "/doc/{userId}/views?page_index={startIndex}&page_size={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($startIndex !== null) {
			$resourcePath = str_replace("{startIndex}", $startIndex, $resourcePath);
		}
		if($pageSize !== null) {
			$resourcePath = str_replace("{pageSize}", $pageSize, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'DocumentViewsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Share document
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  @param sharers  Sharers
   *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */

	 public function ShareDocument($userId, $fileId, $sharers) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/sharers";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}
		if($sharers !== null) {
			$resourcePath = str_replace("{sharers}", $sharers, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SharedUsersResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Unshare document
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */

	 public function UnshareDocument($userId, $fileId) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/sharers";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SharedUsersResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get folder sharers
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param folderId  Folder Id
   *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */

	 public function GetFolderSharers($userId, $folderId) {

		//parse inputs
		$resourcePath = "/doc/{userId}/folders/{folderId}/sharers";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($folderId !== null) {
			$resourcePath = str_replace("{folderId}", $folderId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SharedUsersResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Share folder
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param folderId  Folder Id
   *  @param sharers  Sharers
   *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */

	 public function ShareFolder($userId, $folderId, $sharers) {

		//parse inputs
		$resourcePath = "/doc/{userId}/folders/{folderId}/sharers";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($folderId !== null) {
			$resourcePath = str_replace("{folderId}", $folderId, $resourcePath);
		}
		if($sharers !== null) {
			$resourcePath = str_replace("{sharers}", $sharers, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SharedUsersResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Unshare folder
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param folderId  Folder Id
   *  
	 * @return SharedUsersResponse {@link SharedUsersResponse} 
	 * @throws APIException 
	 */

	 public function UnshareFolder($userId, $folderId) {

		//parse inputs
		$resourcePath = "/doc/{userId}/folders/{folderId}/sharers";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($folderId !== null) {
			$resourcePath = str_replace("{folderId}", $folderId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SharedUsersResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Set document access mode
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  @param mode  Mode
   * 	 *      Allowed values are - 0,1,2,3,255  
	 * @return DocumentAccessInfoResponse {@link DocumentAccessInfoResponse} 
	 * @throws APIException 
	 */

	 public function SetDocumentAccessMode($userId, $fileId, $mode) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/accessinfo?mode={mode}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}
		if($mode !== null) {
			$resourcePath = str_replace("{mode}", $mode, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'DocumentAccessInfoResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get document access info
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  
	 * @return DocumentAccessInfoResponse {@link DocumentAccessInfoResponse} 
	 * @throws APIException 
	 */

	 public function GetDocumentAccessInfo($userId, $fileId) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/accessinfo";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'DocumentAccessInfoResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get document metadata
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  
	 * @return GetDocumentInfoResponse {@link GetDocumentInfoResponse} 
	 * @throws APIException 
	 */

	 public function GetDocumentMetadata($userId, $fileId) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/metadata";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'GetDocumentInfoResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Set document user status
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  @param status  Status
   *  
	 * @return DocumentUserStatusResponse {@link DocumentUserStatusResponse} 
	 * @throws APIException 
	 */

	 public function SetDocumentUserStatus($userId, $fileId, $status) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/sharer";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}
		if($status !== null) {
			$resourcePath = str_replace("{status}", $status, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'DocumentUserStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get shared documents
	 *
	 * 
	 * 
   * @param docDocInputSharesInput  
   *  
	 * @return SharedDocumentsResponse {@link SharedDocumentsResponse} 
	 * @throws APIException 
	 */

	 public function GetSharedDocuments($docDocInputSharesInput) {

		//parse inputs
		$resourcePath = "/doc/{userId}/shares/{sharesTypes}?page_index={pageIndex}&page_size={pageSize}&order_by={orderBy}&order_asc={orderAsc}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($docDocInputSharesInput !== null && $docDocInputSharesInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $docDocInputSharesInput->userId, $resourcePath);	
		}
		if($docDocInputSharesInput !== null && $docDocInputSharesInput->sharesTypes !== null) {
		 	$resourcePath = str_replace("{sharesTypes}", $docDocInputSharesInput->sharesTypes, $resourcePath);	
		}
		if($docDocInputSharesInput !== null && $docDocInputSharesInput->pageIndex !== null) {
		 	$resourcePath = str_replace("{pageIndex}", $docDocInputSharesInput->pageIndex, $resourcePath);	
		}
		if($docDocInputSharesInput !== null && $docDocInputSharesInput->pageSize !== null) {
		 	$resourcePath = str_replace("{pageSize}", $docDocInputSharesInput->pageSize, $resourcePath);	
		}
		if($docDocInputSharesInput !== null && $docDocInputSharesInput->orderBy !== null) {
		 	$resourcePath = str_replace("{orderBy}", $docDocInputSharesInput->orderBy, $resourcePath);	
		}
		if($docDocInputSharesInput !== null && $docDocInputSharesInput->orderAsc !== null) {
		 	$resourcePath = str_replace("{orderAsc}", $docDocInputSharesInput->orderAsc, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SharedDocumentsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get template fields
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  @param includeGeometry  Include geometry
   *  
	 * @return TemplateFieldsResponse {@link TemplateFieldsResponse} 
	 * @throws APIException 
	 */

	 public function GetTemplateFields($userId, $fileId, $includeGeometry) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/fields?include_geometry={includeGeometry}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}
		if($includeGeometry !== null) {
			$resourcePath = str_replace("{includeGeometry}", $includeGeometry, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'TemplateFieldsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get document formats
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fileId  File GUID
   *  
	 * @return GetDocumentForeignTypesResponse {@link GetDocumentForeignTypesResponse} 
	 * @throws APIException 
	 */

	 public function GetDocumentFormats($userId, $fileId) {

		//parse inputs
		$resourcePath = "/doc/{userId}/files/{fileId}/formats";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fileId !== null) {
			$resourcePath = str_replace("{fileId}", $fileId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'GetDocumentForeignTypesResponse');
		return $responseObject;
				
				
	 }



}