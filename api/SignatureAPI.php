<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class SignatureAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Delegate envelope recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DelegateEnvelopeRecipient($userId, $envelopeId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/delegate?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add contact
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param postData  Contact data
   *  
	 * @return SignatureContactResponse {@link SignatureContactResponse} 
	 * @throws APIException 
	 */

	 public function AddContact($userId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/contact";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureContactResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Update contact
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param contactId  Contact GUID
   *  @param postData  Contact data
   *  
	 * @return SignatureContactResponse {@link SignatureContactResponse} 
	 * @throws APIException 
	 */

	 public function ModifyContact($userId, $contactId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/contacts/{contactId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($contactId !== null) {
			$resourcePath = str_replace("{contactId}", $contactId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureContactResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get contacts
	 *
	 * 
	 * 
   * @param signatureSignatureInput  
   *  
	 * @return SignatureContactsResponse {@link SignatureContactsResponse} 
	 * @throws APIException 
	 */

	 public function GetContacts($signatureSignatureInput) {

		//parse inputs
		$resourcePath = "/signature/{userId}/contacts?firstName={firstName}&lastName={lastName}&email={email}&records={count}&page={page}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($signatureSignatureInput !== null && $signatureSignatureInput->page !== null) {
		 	$queryParams["page"] = $signatureSignatureInput->page;
		}
		if($signatureSignatureInput !== null && $signatureSignatureInput->firstName !== null) {
		 	$queryParams["firstName"] = $signatureSignatureInput->firstName;
		}
		if($signatureSignatureInput !== null && $signatureSignatureInput->lastName !== null) {
		 	$queryParams["lastName"] = $signatureSignatureInput->lastName;
		}
		if($signatureSignatureInput !== null && $signatureSignatureInput->email !== null) {
		 	$queryParams["email"] = $signatureSignatureInput->email;
		}

		if($signatureSignatureInput !== null && $signatureSignatureInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $signatureSignatureInput->userId, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureContactsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete contact
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param contactId  Contact GUID
   *  
	 * @return SignatureContactResponse {@link SignatureContactResponse} 
	 * @throws APIException 
	 */

	 public function DeleteContact($userId, $contactId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/contacts/{contactId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($contactId !== null) {
			$resourcePath = str_replace("{contactId}", $contactId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureContactResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Import contacts
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  
	 * @return SignatureContactsImportResponse {@link SignatureContactsImportResponse} 
	 * @throws APIException 
	 */

	 public function ImportContacts($userId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/contacts";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureContactsImportResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get envelope recources
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  
	 * @return SignatureEnvelopeResourcesResponse {@link SignatureEnvelopeResourcesResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureEnvelopeResources($userId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/resources";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeResourcesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature envelope field location
	 *
	 * 
	 * 
   * @param postData  Settings of the field location
   *  @param signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput  
   *  
	 * @return SignatureEnvelopeFieldResponse {@link SignatureEnvelopeFieldResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureEnvelopeFieldLocation($postData, $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->userId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->envelopeId !== null) {
		 	$resourcePath = str_replace("{envelopeId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->envelopeId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->documentId !== null) {
		 	$resourcePath = str_replace("{documentId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->documentId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->recipientId !== null) {
		 	$resourcePath = str_replace("{recipientId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->recipientId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->fieldId !== null) {
		 	$resourcePath = str_replace("{fieldId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->fieldId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->locationId !== null) {
		 	$resourcePath = str_replace("{locationId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldsInputLocationsInput->locationId, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get templates
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param page  Page number
   *  
	 * @return SignatureTemplatesResponse {@link SignatureTemplatesResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureTemplates($userId, $page) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates?records={count}&page={page}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($page !== null) {
		$queryParams['page'] = $page;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplatesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureTemplate($userId, $templateId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Create template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param name  Template name
   *  @param templateId  Template GUID of the template that will be used to create the new template
   *  @param postData  Settings of the template
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function CreateSignatureTemplate($userId, $name, $templateId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/template?name={name}&templateId={templateId}&envelopeId={envelopeId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($name !== null) {
		$queryParams['name'] = $name;
	}
    if($templateId !== null) {
		$queryParams['templateId'] = $templateId;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param postData  Settings of the template
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureTemplate($userId, $templateId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Rename template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param name  New template name
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function RenameSignatureTemplate($userId, $templateId, $name) {

		//parse inputs
		$resourcePath = "/signature/{userId}/tempalates/{templateId}?name={name}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
    if($name !== null) {
		$queryParams['name'] = $name;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureTemplate($userId, $templateId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add recipient to the template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param nickname  Nickname of the recipient
   *  @param order  Display order of the recipient
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureTemplateRecipient($userId, $templateId, $nickname, $order) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/recipient?nickname={nickname}&role={roleId}&order={order}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($nickname !== null) {
		$queryParams['nickname'] = $nickname;
	}
    if($order !== null) {
		$queryParams['order'] = $order;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get template recipients
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  
	 * @return SignatureTemplateRecipientsResponse {@link SignatureTemplateRecipientsResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureTemplateRecipients($userId, $templateId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/recipients";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateRecipientsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Remove recipient from template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureTemplateRecipient($userId, $templateId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/recipients/{recipientId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Update template recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param nickname  Nickname of the recipient
   *  @param order  Display order of the recipient
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureTemplateRecipient($userId, $templateId, $nickname, $order) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/recipient/{recipientId}?nickname={nickname}&role={roleId}&order={order}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
    if($nickname !== null) {
		$queryParams['nickname'] = $nickname;
	}
    if($order !== null) {
		$queryParams['order'] = $order;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add document to template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param documentId  Document GUID
   *  @param order  Display order of the document
   *  
	 * @return SignatureTemplateDocumentResponse {@link SignatureTemplateDocumentResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureTemplateDocument($userId, $templateId, $documentId, $order) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/document/{documentId}?order={order}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($order !== null) {
		$queryParams['order'] = $order;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateDocumentResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get documents in template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  
	 * @return SignatureTemplateDocumentsResponse {@link SignatureTemplateDocumentsResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureTemplateDocuments($userId, $templateId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/documents";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateDocumentsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Remove document from template
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param documentId  Document GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureTemplateDocument($userId, $templateId, $documentId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add signature template field
	 *
	 * 
	 * 
   * @param postData  Settings of the field
   *  @param signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput  
   *  
	 * @return SignatureTemplateFieldResponse {@link SignatureTemplateFieldResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureTemplateField($postData, $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->userId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->templateId !== null) {
		 	$resourcePath = str_replace("{templateId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->templateId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->documentId !== null) {
		 	$resourcePath = str_replace("{documentId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->documentId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->recipientId !== null) {
		 	$resourcePath = str_replace("{recipientId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldInput->recipientId, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature template field
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param documentId  Document GUID
   *  @param fieldId  Field GUID
   *  
	 * @return SignatureTemplateFieldResponse {@link SignatureTemplateFieldResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureTemplateField($userId, $templateId, $documentId, $fieldId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}/field/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete signature template field location
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param fieldId  Field GUID
   *  @param locationId  Field location GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureTemplateFieldLocation($userId, $templateId, $fieldId, $locationId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/fields/{fieldId}/locations/{locationId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}
		if($locationId !== null) {
			$resourcePath = str_replace("{locationId}", $locationId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature template field location
	 *
	 * 
	 * 
   * @param postData  Settings of the field location
   *  @param signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput  
   *  
	 * @return SignatureTemplateFieldResponse {@link SignatureTemplateFieldResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureTemplateFieldLocation($postData, $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/documents/{documentId}/recipient/{recipientId}/fields/{fieldId}/locations/{locationId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->userId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->templateId !== null) {
		 	$resourcePath = str_replace("{templateId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->templateId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->documentId !== null) {
		 	$resourcePath = str_replace("{documentId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->documentId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->recipientId !== null) {
		 	$resourcePath = str_replace("{recipientId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->recipientId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->fieldId !== null) {
		 	$resourcePath = str_replace("{fieldId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->fieldId, $resourcePath);	
		}
		if($signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput !== null && $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->locationId !== null) {
		 	$resourcePath = str_replace("{locationId}", $signatureSignatureInputTemplatesInputDocumentsInputRecipientInputFieldsInputLocationsInput->locationId, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get template fields
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param documentId  Document GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureTemplateFieldsResponse {@link SignatureTemplateFieldsResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureTemplateFields($userId, $templateId, $documentId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/fields?document={documentId}&recipient={recipientId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateFieldsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete signature template field
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param templateId  Template GUID
   *  @param fieldId  Field GUID
   *  
	 * @return SignatureTemplateResponse {@link SignatureTemplateResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureTemplateField($userId, $templateId, $fieldId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/templates/{templateId}/fields/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($templateId !== null) {
			$resourcePath = str_replace("{templateId}", $templateId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureTemplateResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get user signatures
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  
	 * @return SignatureSignaturesResponse {@link SignatureSignaturesResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatures($userId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/signatures";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureSignaturesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete user signature
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param signatureId  Signature GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignature($userId, $signatureId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/signatures/{signatureId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($signatureId !== null) {
			$resourcePath = str_replace("{signatureId}", $signatureId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Create user signature
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param name  Signature name
   *  @param postData  Settings of the field
   *  
	 * @return SignatureSignatureResponse {@link SignatureSignatureResponse} 
	 * @throws APIException 
	 */

	 public function CreateSignature($userId, $name, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/signature?name={name}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($name !== null) {
		$queryParams['name'] = $name;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureSignatureResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add signature image
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param signatureId  Signature GUID
   *  @param type  0: Signature, 1: Initials
   *  @param dataFrom  Url to document containing the image
   *  
	 * @return SignatureSignatureResponse {@link SignatureSignatureResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureImage($userId, $signatureId, $type, $dataFrom) {

		//parse inputs
		$resourcePath = "/signature/{userId}/signature/{signatureId}/image?type={type}&datafrom={dataFrom}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($type !== null) {
		$queryParams['type'] = $type;
	}
    if($dataFrom !== null) {
		$queryParams['dataFrom'] = $dataFrom;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($signatureId !== null) {
			$resourcePath = str_replace("{signatureId}", $signatureId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureSignatureResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Fill envelope field
	 *
	 * 
	 * 
   * @param postData  Data to be placed in field
   *  @param signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput  
   *  
	 * @return SignatureEnvelopeFieldResponse {@link SignatureEnvelopeFieldResponse} 
	 * @throws APIException 
	 */

	 public function FillEnvelopeField($postData, $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}?signatureId={signatureId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->userId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->envelopeId !== null) {
		 	$resourcePath = str_replace("{envelopeId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->envelopeId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->documentId !== null) {
		 	$resourcePath = str_replace("{documentId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->documentId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->recipientId !== null) {
		 	$resourcePath = str_replace("{recipientId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->recipientId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->fieldId !== null) {
		 	$resourcePath = str_replace("{fieldId}", $signatureSignatureInputEnvelopesInputDocumentsInputRecipientInputFieldInput->fieldId, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Sign envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function SignEnvelope($userId, $envelopeId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/sign";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Decline envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeclineEnvelope($userId, $envelopeId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}/decline";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature envelopes
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param statusId  Filter envelopes by statusId
   *  @param page  Show records for page number
   *  @param recipientEmail  Filter envelopes by recipient email
   *  @param date  Filter envelopes by date
   *  @param name  Filter envelopes by name
   *  
	 * @return SignatureEnvelopesResponse {@link SignatureEnvelopesResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureEnvelopes($userId, $statusId, $page, $recipientEmail, $date, $name) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes?statusId={statusId}&records={count}&page={page}&document={originalDocumentMD5}&recipient={recipientEmail}&date={date}&name={name}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($statusId !== null) {
		$queryParams['statusId'] = $statusId;
	}
    if($page !== null) {
		$queryParams['page'] = $page;
	}
    if($recipientEmail !== null) {
		$queryParams['recipientEmail'] = $recipientEmail;
	}
    if($date !== null) {
		$queryParams['date'] = $date;
	}
    if($name !== null) {
		$queryParams['name'] = $name;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature envelopes where the user is recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param statusId  Filter envelopes by statusId
   *  @param page  Show records for page number
   *  
	 * @return SignatureEnvelopesResponse {@link SignatureEnvelopesResponse} 
	 * @throws APIException 
	 */

	 public function GetRecipientSignatureEnvelopes($userId, $statusId, $page) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/recipient?statusId={statusId}&records={count}&page={page}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
    if($statusId !== null) {
		$queryParams['statusId'] = $statusId;
	}
    if($page !== null) {
		$queryParams['page'] = $page;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureEnvelope($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Create signature envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param name  Envelope name
   *  @param postData  Settings of the new envelope
   *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */

	 public function CreateSignatureEnvelope($userId, $name, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelope?name={name}&templateId={templateId}&envelopeId={envelopeId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($name !== null) {
		$queryParams['name'] = $name;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param postData  Settings of the envelope
   *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureEnvelope($userId, $envelopeId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Rename signature envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param name  New envelope name
   *  
	 * @return SignatureEnvelopeResponse {@link SignatureEnvelopeResponse} 
	 * @throws APIException 
	 */

	 public function RenameSignatureEnvelope($userId, $envelopeId, $name) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}?name={name}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
    if($name !== null) {
		$queryParams['name'] = $name;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete signature envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureEnvelope($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature roles
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  
	 * @return SignatureRolesResponse {@link SignatureRolesResponse} 
	 * @throws APIException 
	 */

	 public function GetRolesList($userId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/roles?id={roleId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureRolesResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature fields
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  
	 * @return SignatureFieldsResponse {@link SignatureFieldsResponse} 
	 * @throws APIException 
	 */

	 public function GetFieldsList($userId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/fields?id={fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureFieldsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Create signature field
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param postData  Settings of the new field
   *  
	 * @return SignatureFieldResponse {@link SignatureFieldResponse} 
	 * @throws APIException 
	 */

	 public function CreateSignatureField($userId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/field";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature field
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fieldId  Field GUID
   *  @param postData  Settings of the field
   *  
	 * @return SignatureFieldResponse {@link SignatureFieldResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureField($userId, $fieldId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/fields/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete signature field
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param fieldId  Field GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureField($userId, $fieldId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/fields/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add signature envelope recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param order  Recipient order
   *  
	 * @return SignatureEnvelopeRecipientResponse {@link SignatureEnvelopeRecipientResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureEnvelopeRecipient($userId, $order) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($order !== null) {
		$queryParams['order'] = $order;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeRecipientResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature envelope recipients
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return SignatureEnvelopeRecipientsResponse {@link SignatureEnvelopeRecipientsResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureEnvelopeRecipients($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipients";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeRecipientsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete signature envelope recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureEnvelopeRecipient($userId, $envelopeId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipients/{recipientId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature envelope recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param order  Recipient order
   *  
	 * @return SignatureEnvelopeRecipientResponse {@link SignatureEnvelopeRecipientResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureEnvelopeRecipient($userId, $order) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/recipient/{recipientId}?email={recipientEmail}&firstname={recipientFirstName}&lastname={recipientLastName}&role={roleId}&order={order}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
    if($order !== null) {
		$queryParams['order'] = $order;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeRecipientResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add document in envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param documentId  Document GUID
   *  @param order  Document order
   *  
	 * @return SignatureEnvelopeDocumentResponse {@link SignatureEnvelopeDocumentResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureEnvelopeDocument($userId, $envelopeId, $documentId, $order) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/document/{documentId}?order={order}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
    if($order !== null) {
		$queryParams['order'] = $order;
	}

		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeDocumentResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get documents in envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return SignatureEnvelopeDocumentsResponse {@link SignatureEnvelopeDocumentsResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureEnvelopeDocuments($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeDocumentsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signed envelope document
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param documentId  Document GUID
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function GetSignedEnvelopeDocument($userId, $envelopeId, $documentId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/document/{documentId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * Get signed envelope documents
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function GetSignedEnvelopeDocuments($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/get";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * Delete document from envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param documentId  Document GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureEnvelopeDocument($userId, $envelopeId, $documentId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Add signature field for document in envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param documentId  Document GUID
   *  @param recipientId  Recipient GUID
   *  @param fieldId  Field GUID
   *  @param postData  Settings of the field
   *  
	 * @return SignatureEnvelopeFieldsResponse {@link SignatureEnvelopeFieldsResponse} 
	 * @throws APIException 
	 */

	 public function AddSignatureEnvelopeField($userId, $envelopeId, $documentId, $recipientId, $fieldId, $postData) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/recipient/{recipientId}/field/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeFieldsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Get signature field for document in envelope per recipient
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param documentId  Document GUID
   *  @param recipientId  Recipient GUID
   *  
	 * @return SignatureEnvelopeFieldsResponse {@link SignatureEnvelopeFieldsResponse} 
	 * @throws APIException 
	 */

	 public function GetSignatureEnvelopeFields($userId, $envelopeId, $documentId, $recipientId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/fields?document={documentId}&recipient={recipientId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($documentId !== null) {
			$resourcePath = str_replace("{documentId}", $documentId, $resourcePath);
		}
		if($recipientId !== null) {
			$resourcePath = str_replace("{recipientId}", $recipientId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeFieldsResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Delete signature envelope field
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param fieldId  Field GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureEnvelopeField($userId, $envelopeId, $fieldId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Modify signature envelope field
	 *
	 * 
	 * 
   * @param postData  Settings of the field
   *  @param signatureSignatureInputEnvelopesInputDocumentsInputFieldInput  
   *  
	 * @return SignatureEnvelopeFieldResponse {@link SignatureEnvelopeFieldResponse} 
	 * @throws APIException 
	 */

	 public function ModifySignatureEnvelopeField($postData, $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/documents/{documentId}/field/{fieldId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($signatureSignatureInputEnvelopesInputDocumentsInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->userId !== null) {
		 	$resourcePath = str_replace("{userId}", $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->userId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->envelopeId !== null) {
		 	$resourcePath = str_replace("{envelopeId}", $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->envelopeId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->documentId !== null) {
		 	$resourcePath = str_replace("{documentId}", $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->documentId, $resourcePath);	
		}
		if($signatureSignatureInputEnvelopesInputDocumentsInputFieldInput !== null && $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->fieldId !== null) {
		 	$resourcePath = str_replace("{fieldId}", $signatureSignatureInputEnvelopesInputDocumentsInputFieldInput->fieldId, $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureEnvelopeFieldResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Archive envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function ArchiveSignatureEnvelope($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/archive";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Send envelope
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function SignatureEnvelopeSend($userId, $envelopeId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/send";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Remove signature envelope field location
	 *
	 * 
	 * 
   * @param userId  User GUID
   *  @param envelopeId  Envelope GUID
   *  @param fieldId  Field GUID
   *  @param locationId  Field location GUID
   *  
	 * @return SignatureStatusResponse {@link SignatureStatusResponse} 
	 * @throws APIException 
	 */

	 public function DeleteSignatureEnvelopeFieldLocation($userId, $envelopeId, $fieldId, $locationId) {

		//parse inputs
		$resourcePath = "/signature/{userId}/envelopes/{envelopeId}/fields/{fieldId}/locations/{locationId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId !== null) {
			$resourcePath = str_replace("{userId}", $userId, $resourcePath);
		}
		if($envelopeId !== null) {
			$resourcePath = str_replace("{envelopeId}", $envelopeId, $resourcePath);
		}
		if($fieldId !== null) {
			$resourcePath = str_replace("{fieldId}", $fieldId, $resourcePath);
		}
		if($locationId !== null) {
			$resourcePath = str_replace("{locationId}", $locationId, $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SignatureStatusResponse');
		return $responseObject;
				
				
	 }



}