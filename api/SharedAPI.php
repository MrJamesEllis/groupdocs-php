<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class SharedAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Download
	 *
	 * 
	 * 
   * @param guid  GUID
   *  @param fileName  File name
   *  @param render  Render
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function Download($guid, $fileName, $render) {

		//parse inputs
		$resourcePath = "/shared/files/{guid}?filename={fileName}&render={render}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($guid != null) {
			$resourcePath = str_replace("{guid}", $this->apiClient->toPathValue($guid), $resourcePath);
		}
		if($fileName != null) {
			$resourcePath = str_replace("{fileName}", $this->apiClient->toPathValue($fileName), $resourcePath);
		}
		if($render != null) {
			$resourcePath = str_replace("{render}", $this->apiClient->toPathValue($render), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * Get image
	 *
	 * 
	 * 
   * @param sharedSharedInputFilesInputPagesInput  
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function GetImage($sharedSharedInputFilesInputPagesInput) {

		//parse inputs
		$resourcePath = "/shared/files/{guid}/pages/{folio}/{dimension}?quality={quality}&use_pdf={usePdf}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($sharedSharedInputFilesInputPagesInput != null && $sharedSharedInputFilesInputPagesInput->guid != null) {
		 	$resourcePath = str_replace("{guid}", $this->apiClient->toPathValue($sharedSharedInputFilesInputPagesInput->guid), $resourcePath);	
		}
		if($sharedSharedInputFilesInputPagesInput != null && $sharedSharedInputFilesInputPagesInput->folio != null) {
		 	$resourcePath = str_replace("{folio}", $this->apiClient->toPathValue($sharedSharedInputFilesInputPagesInput->folio), $resourcePath);	
		}
		if($sharedSharedInputFilesInputPagesInput != null && $sharedSharedInputFilesInputPagesInput->dimension != null) {
		 	$resourcePath = str_replace("{dimension}", $this->apiClient->toPathValue($sharedSharedInputFilesInputPagesInput->dimension), $resourcePath);	
		}
		if($sharedSharedInputFilesInputPagesInput != null && $sharedSharedInputFilesInputPagesInput->quality != null) {
		 	$resourcePath = str_replace("{quality}", $this->apiClient->toPathValue($sharedSharedInputFilesInputPagesInput->quality), $resourcePath);	
		}
		if($sharedSharedInputFilesInputPagesInput != null && $sharedSharedInputFilesInputPagesInput->usePdf != null) {
		 	$resourcePath = str_replace("{usePdf}", $this->apiClient->toPathValue($sharedSharedInputFilesInputPagesInput->usePdf), $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * Get image url
	 *
	 * 
	 * 
   * @param guid  GUID
   *  @param folio  Folio
   *  @param dimension  Dimension
   *  @param quality  Quality
   *  @param usePdf  Use Pdf
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function GetImageUrl($guid, $folio, $dimension, $quality, $usePdf) {

		//parse inputs
		$resourcePath = "/shared/files/{guid}/pages/{folio}/{dimension}/url?quality={quality}&use_pdf={usePdf}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($guid != null) {
			$resourcePath = str_replace("{guid}", $this->apiClient->toPathValue($guid), $resourcePath);
		}
		if($folio != null) {
			$resourcePath = str_replace("{folio}", $this->apiClient->toPathValue($folio), $resourcePath);
		}
		if($dimension != null) {
			$resourcePath = str_replace("{dimension}", $this->apiClient->toPathValue($dimension), $resourcePath);
		}
		if($quality != null) {
			$resourcePath = str_replace("{quality}", $this->apiClient->toPathValue($quality), $resourcePath);
		}
		if($usePdf != null) {
			$resourcePath = str_replace("{usePdf}", $this->apiClient->toPathValue($usePdf), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * Get xml
	 *
	 * 
	 * 
   * @param guid  GUID
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function GetXml($guid) {

		//parse inputs
		$resourcePath = "/shared/files/{guid}/xml";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($guid != null) {
			$resourcePath = str_replace("{guid}", $this->apiClient->toPathValue($guid), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * Get package
	 *
	 * 
	 * 
   * @param path  Path
   *  
	 * @return string {@link string} 
	 * @throws APIException 
	 */

	 public function GetPackage($path) {

		//parse inputs
		$resourcePath = "/shared/packages/{*path}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($path != null) {
			$resourcePath = str_replace("{path}", $this->apiClient->toPathValue($path), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'string');
		return $responseObject;
				
				
	 }


	/**
	 * View document
	 *
	 * 
	 * 
   * @param sharedSharedInputFilesInput  
   *  
	 * @return ViewDocumentResponse {@link ViewDocumentResponse} 
	 * @throws APIException 
	 */

	 public function ViewDocument($sharedSharedInputFilesInput) {

		//parse inputs
		$resourcePath = "/shared/files/{guid}/thumbnails?page_number={pageNumber}&page_count={pageCount}&quality={quality}&use_pdf={usePdf}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
	
		
		if($sharedSharedInputFilesInput != null && $sharedSharedInputFilesInput->guid != null) {
		 	$resourcePath = str_replace("{guid}", $this->apiClient->toPathValue($sharedSharedInputFilesInput->guid), $resourcePath);	
		}
		if($sharedSharedInputFilesInput != null && $sharedSharedInputFilesInput->pageNumber != null) {
		 	$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($sharedSharedInputFilesInput->pageNumber), $resourcePath);	
		}
		if($sharedSharedInputFilesInput != null && $sharedSharedInputFilesInput->pageCount != null) {
		 	$resourcePath = str_replace("{pageCount}", $this->apiClient->toPathValue($sharedSharedInputFilesInput->pageCount), $resourcePath);	
		}
		if($sharedSharedInputFilesInput != null && $sharedSharedInputFilesInput->quality != null) {
		 	$resourcePath = str_replace("{quality}", $this->apiClient->toPathValue($sharedSharedInputFilesInput->quality), $resourcePath);	
		}
		if($sharedSharedInputFilesInput != null && $sharedSharedInputFilesInput->usePdf != null) {
		 	$resourcePath = str_replace("{usePdf}", $this->apiClient->toPathValue($sharedSharedInputFilesInput->usePdf), $resourcePath);	
		}

	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ViewDocumentResponse');
		return $responseObject;
				
				
	 }



}